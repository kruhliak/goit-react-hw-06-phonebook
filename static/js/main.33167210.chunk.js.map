{"version":3,"sources":["components/redux/actions/contacts-action.js","components/redux/reducers/contacts-reducer.js","components/redux/store.js","components/ContactForm/ContactForm.styles.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styles.jsx","components/redux/selectors/contacts-selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","contactsActions","items","createReducer","state","find","contact","includes","alert","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","Form","styled","form","ContactForm","useState","setName","setsNumber","dispatch","useDispatch","handleChangeForm","e","currentTarget","value","console","log","resetForm","onSubmit","preventDefault","type","onChange","pattern","title","required","autoComplete","List","ul","getFilter","getVisibleContacts","getContacts","normalizedFilter","toLowerCase","ContactList","useSelector","map","onClick","Thumb","div","Filter","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.33167210.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nexport const addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n}));\n\nexport const deleteContact = createAction('contacts/delete');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n\nconst contactsActions = {\n  addContact,\n  deleteContact,\n  changeFilter,\n};\nexport default contactsActions;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContact,\n  deleteContact,\n  changeFilter,\n} from '../actions/contacts-action';\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => {\n    const findContact = state.find(contact =>\n      contact.name.includes(payload.name),\n    );\n    if (findContact) {\n      alert(`${payload.name} is already in contacts`);\n      return;\n    }\n    return [...state, payload];\n  },\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './reducers/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: grid;\n  grid-template-columns: min-content;\n\n  & button {\n    margin: 10px 0;\n    background-color: #e6ffe0d5;\n    border: 1px solid #000;\n    border-radius: 4px;\n    &:hover,\n    :focus {\n      background-color: #bffab0d3;\n      transform: scale(1.1);\n    }\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport contactsActions from '../redux/actions/contacts-action';\nimport { Form } from './ContactForm.styles';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setsNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChangeForm = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        return setName(value);\n\n      case 'number':\n        return setsNumber(value);\n\n      default:\n        console.log('default');\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    dispatch(contactsActions.addContact({ name, number }));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setsNumber('');\n  };\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmitForm}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            onChange={handleChangeForm}\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            autoComplete=\"off\"\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            onChange={handleChangeForm}\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            autoComplete=\"off\"\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </div>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 5px;\n  margin: 10px 0;\n\n  & li {\n    margin: 5px 0;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    & button {\n      margin-left: 10px;\n      background-color: #f0c8c8;\n      border: 1px solid #000;\n      border-radius: 4px;\n      &:hover,\n    :focus {\n      background-color: #f09797;\n      transform: scale(1.05);\n    }\n    }\n  }\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import { List } from './ContactList.styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../redux/actions/contacts-action';\nimport { getVisibleContacts } from '../redux/selectors/contacts-selectors';\n\nfunction ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContacts = id => dispatch(contactsActions.deleteContact(id));\n  return (\n    <List>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button type=\"button\" onClick={() => onDeleteContacts(contact.id)}>\n            Удалить\n          </button>\n        </li>\n      ))}\n    </List>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Thumb = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n\n  & p {\n    margin: 5px 0;\n  }\n`;\n","import { Thumb } from './Filter.styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../redux/selectors/contacts-selectors';\nimport contactsActions from '../redux/actions/contacts-action';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <Thumb>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={e =>\n          dispatch(contactsActions.changeFilter(e.currentTarget.value))\n        }\n        value={value}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        autoComplete=\"off\"\n      />\n    </Thumb>\n  );\n};\n\nexport default Filter;\n","import ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nexport default function App() {\n  return (\n    <div id=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './components/redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}